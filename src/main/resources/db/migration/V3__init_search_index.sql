CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE public.document_search_index (
    id integer NOT NULL,
    keywords TEXT,
    keywords_tsv tsvector,
    content_vector vector(384),
    document_id integer,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);

ALTER TABLE public.document_search_index OWNER TO postgres;

ALTER TABLE public.document_search_index ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.document_search_index_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Columns
ALTER TABLE ONLY public.document_search_index
    ADD CONSTRAINT document_search_index_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.document_search_index
    ADD CONSTRAINT fk_document_search_index_document FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE ON UPDATE CASCADE;

-- Indexes
CREATE INDEX IF NOT EXISTS idx_content_vector_vector
    ON document_search_index
    USING ivfflat (content_vector vector_cosine_ops);

CREATE INDEX IF NOT EXISTS idx_keywords_tsv
    ON document_search_index
    USING GIN (keywords_tsv);

-- Function
CREATE OR REPLACE FUNCTION update_keywords_tsv() RETURNS trigger AS $$
BEGIN
  NEW.keywords_tsv := to_tsvector('simple', COALESCE(NEW.keywords, ''));
  RETURN NEW;
END
$$ LANGUAGE plpgsql;

-- Trigger
DROP TRIGGER IF EXISTS trg_keywords_tsv ON document_search_index;

CREATE TRIGGER trg_keywords_tsv
BEFORE INSERT OR UPDATE ON document_search_index
FOR EACH ROW EXECUTE FUNCTION update_keywords_tsv();
