CREATE TABLE public.users (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email character varying(255) NOT NULL UNIQUE,
    password character varying(255) NOT NULL,
    first_name character varying(255) NOT NULL,
    last_name character varying(255) NOT NULL,
    avatar character varying(255),
    is_active boolean,
    two_factor_enabled boolean,
    two_factor_secret character varying(255),
    role_id integer NOT NULL,
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone
);

CREATE TABLE public.roles (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL UNIQUE,
    description character varying(255),
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone
);

CREATE TABLE public.permissions (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL,
    api_path character varying(255) NOT NULL,
    method character varying(255) NOT NULL,
    module character varying(255) NOT NULL,
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    CONSTRAINT api_path_method_unique UNIQUE (api_path, method)
);

CREATE TABLE public.role_permission (
    role_id integer NOT NULL,
    permission_id integer NOT NULL,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE public.system_settings (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    key character varying(255) NOT NULL UNIQUE,
    value TEXT NOT NULL,
    description character varying(255),
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    created_by integer,
    updated_by integer
);

CREATE TABLE public.user_groups (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL,
    description character varying(255),
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    created_by integer,
    updated_by integer,
    CONSTRAINT group_name_unique UNIQUE (name, created_by)
);

CREATE TABLE public.user_group_members (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    group_id integer NOT NULL,
    user_id integer NOT NULL,
    role character varying(255),
    CONSTRAINT user_group_members_role_check CHECK (role::text = ANY (ARRAY['ADMIN','MEMBER']::text[])),
    CONSTRAINT user_group_unique UNIQUE (user_id, group_id)
);

CREATE TABLE public.folders (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL,
    inherit_permissions boolean,
    is_deleted boolean,
    parent_id integer,
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    created_by integer,
    updated_by integer
);

CREATE TABLE public.documents (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL,
    description TEXT,
    original_filename character varying(255) NOT NULL,
    stored_filename character varying(255) NOT NULL UNIQUE,
    file_hash character varying(255) NOT NULL,
    file_path character varying(255) NOT NULL,
    file_size double precision NOT NULL,
    mime_type character varying(255) NOT NULL,
    is_deleted boolean,
    is_encrypted boolean,
    storage_type character varying(255),
    extracted_text TEXT,
    folder_id integer,
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    created_by integer,
    updated_by integer,
    CONSTRAINT documents_storage_type_check CHECK (storage_type::text = ANY (ARRAY['LOCAL','AWS_S3','GCS']::text[]))
);

CREATE TABLE public.document_versions (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL,
    file_hash character varying(255) NOT NULL,
    file_path character varying(255) NOT NULL,
    file_size double precision NOT NULL,
    mime_type character varying(255) NOT NULL,
    stored_filename character varying(255) NOT NULL,
    version_number integer NOT NULL,
    document_id integer,
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    CONSTRAINT document_number_unique UNIQUE (document_id, version_number)
);

CREATE TABLE public.document_tags (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255),
    color character varying(255),
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    created_by integer,
    updated_by integer,
    CONSTRAINT name_color_user_unique UNIQUE (name, color, created_by)
);

CREATE TABLE public.document_tag_assignments (
    document_id integer NOT NULL,
    document_tag_id integer NOT NULL,
    PRIMARY KEY (document_id, document_tag_id)
);

CREATE TABLE public.folder_shares (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    folder_id integer,
    group_id integer,
    user_id integer,
    share_type character varying(255),
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    created_by integer,
    updated_by integer,
    CONSTRAINT folder_shares_share_type_check CHECK (share_type::text = ANY (ARRAY['VIEW','EDIT']::text[])),
    CONSTRAINT folder_group_unique UNIQUE (folder_id, group_id),
    CONSTRAINT folder_user_unique UNIQUE (folder_id, user_id)
);

CREATE TABLE public.document_shares (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    document_id integer,
    group_id integer,
    user_id integer,
    share_type character varying(255),
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    created_by integer,
    updated_by integer,
    CONSTRAINT document_shares_share_type_check CHECK (share_type::text = ANY (ARRAY['VIEW','EDIT']::text[])),
    CONSTRAINT document_group_unique UNIQUE (document_id, group_id),
    CONSTRAINT document_user_unique UNIQUE (document_id, user_id)
);

CREATE TABLE public.access_logs (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ip_address character varying(255),
    user_agent character varying(255),
    user_id integer,
    document_id integer,
    action_type character varying(255),
    created_at timestamp(6) with time zone,
    updated_at timestamp(6) with time zone,
    CONSTRAINT access_logs_action_type_check CHECK (action_type::text = ANY (ARRAY['VIEW','DOWNLOAD','UPLOAD','UPDATE','DELETE','SHARE']::text[]))
);

-- Constraints
ALTER TABLE ONLY public.users
    ADD CONSTRAINT fk_users_role FOREIGN KEY (role_id) REFERENCES public.roles(id) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE ONLY public.role_permission
    ADD CONSTRAINT fk_role_permission_permission FOREIGN KEY (permission_id) REFERENCES public.permissions(id) ON DELETE RESTRICT ON UPDATE CASCADE;
ALTER TABLE ONLY public.role_permission
    ADD CONSTRAINT fk_role_permission_role FOREIGN KEY (role_id) REFERENCES public.roles(id) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE ONLY public.system_settings
    ADD CONSTRAINT fk_system_settings_updated_by FOREIGN KEY (updated_by) REFERENCES public.users(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ONLY public.system_settings
    ADD CONSTRAINT fk_system_settings_created_by FOREIGN KEY (created_by) REFERENCES public.users(id) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE ONLY public.user_groups
    ADD CONSTRAINT fk_user_groups_updated_by FOREIGN KEY (updated_by) REFERENCES public.users(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ONLY public.user_groups
    ADD CONSTRAINT fk_user_groups_created_by FOREIGN KEY (created_by) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE ONLY public.user_group_members
    ADD CONSTRAINT fk_user_group_members_user FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.user_group_members
    ADD CONSTRAINT fk_user_group_members_group FOREIGN KEY (group_id) REFERENCES public.user_groups(id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE ONLY public.folders
    ADD CONSTRAINT fk_folders_created_by FOREIGN KEY (created_by) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.folders
    ADD CONSTRAINT fk_folders_parent FOREIGN KEY (parent_id) REFERENCES public.folders(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.folders
    ADD CONSTRAINT fk_folders_updated_by FOREIGN KEY (updated_by) REFERENCES public.users(id) ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT fk_documents_folder FOREIGN KEY (folder_id) REFERENCES public.folders(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.documents
    ADD CONSTRAINT fk_documents_created_by FOREIGN KEY (created_by) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.documents
    ADD CONSTRAINT fk_documents_updated_by FOREIGN KEY (updated_by) REFERENCES public.users(id) ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE ONLY public.document_versions
    ADD CONSTRAINT fk_document_versions_document FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE ONLY public.document_tags
    ADD CONSTRAINT fk_document_tags_updated_by FOREIGN KEY (updated_by) REFERENCES public.users(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ONLY public.document_tags
    ADD CONSTRAINT fk_document_tags_created_by FOREIGN KEY (created_by) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE ONLY public.document_tag_assignments
    ADD CONSTRAINT fk_document_tag_assignments_document FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.document_tag_assignments
    ADD CONSTRAINT fk_document_tag_assignments_tag FOREIGN KEY (document_tag_id) REFERENCES public.document_tags(id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE ONLY public.document_shares
    ADD CONSTRAINT fk_document_shares_user FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.document_shares
    ADD CONSTRAINT fk_document_shares_document FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.document_shares
    ADD CONSTRAINT fk_document_shares_group FOREIGN KEY (group_id) REFERENCES public.user_groups(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.document_shares
    ADD CONSTRAINT fk_document_shares_updated_by FOREIGN KEY (updated_by) REFERENCES public.users(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ONLY public.document_shares
    ADD CONSTRAINT fk_document_shares_created_by FOREIGN KEY (created_by) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE ONLY public.folder_shares
    ADD CONSTRAINT fk_folder_shares_created_by FOREIGN KEY (created_by) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.folder_shares
    ADD CONSTRAINT fk_folder_shares_group FOREIGN KEY (group_id) REFERENCES public.user_groups(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.folder_shares
    ADD CONSTRAINT fk_folder_shares_folder FOREIGN KEY (folder_id) REFERENCES public.folders(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.folder_shares
    ADD CONSTRAINT fk_folder_shares_user FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.folder_shares
    ADD CONSTRAINT fk_folder_shares_updated_by FOREIGN KEY (updated_by) REFERENCES public.users(id) ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE ONLY public.access_logs
    ADD CONSTRAINT fk_access_logs_document FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLY public.access_logs
    ADD CONSTRAINT fk_access_logs_user FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE CASCADE;

-- Indexes
CREATE UNIQUE INDEX unique_doc_name_per_parent
    ON public.documents(name, folder_id)
    WHERE folder_id IS NOT NULL AND is_deleted = false;

CREATE UNIQUE INDEX unique_doc_name_per_user
    ON public.documents(name, created_by)
    WHERE folder_id IS NULL AND is_deleted = false;

CREATE UNIQUE INDEX unique_folder_name_per_parent
    ON public.folders(name, parent_id)
    WHERE parent_id IS NOT NULL AND is_deleted = false;

CREATE UNIQUE INDEX unique_folder_name_per_user
    ON public.folders(name, created_by)
    WHERE parent_id IS NULL AND is_deleted = false;

CREATE INDEX idx_documents_name_lower_pattern ON public.documents (lower(name) text_pattern_ops);

CREATE INDEX idx_folders_name_lower_pattern ON public.folders (lower(name) text_pattern_ops);